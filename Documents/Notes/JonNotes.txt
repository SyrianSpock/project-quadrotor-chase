FILE
{
	track_following.h ("Write your code here")
	This file implements a strategy to follow a GPS track
	
	task (Line 248) -> navigation (Line 928) -> navigation (Line 737) -> track_following
}
	
OBJECTIVE
{
	Obtain current track_following->waypoint_handler->waypoint_following.pos[i]
}

STRUCTURES
{
	track_following_t* track_following (See track_following.h)
	
		typedef struct
		{
			float dist2following;
			mavlink_waypoint_handler_t* waypoint_handler;
			neighbors_t* neighbors;
		}track_following_t;
		
		dist2following (See track_following.c)
			track_following->dist2following = 0.0f;
			for(i=0;i<3;++i)
			{
				track_following->waypoint_handler->waypoint_following.pos[i] = track_following->neighbors->neighbors_list[0].position[i];
				track_following->dist2following += SQR(track_following->neighbors->neighbors_list[0].position[i] - track_following->neighbors->position_estimator->local_position.pos[i]);
				// (Waypoint-DronePosition)^2
			}

			track_following->dist2following = maths_fast_sqrt(track_following->dist2following);
			
	waypoint_handler (See mavlink_waypoint_handler.h)
		
		NOTES: 	- Does not seem to include velocity parameters
				- Used to give the waypoint to follow

		typedef struct
		{
			waypoint_struct waypoint_list[MAX_WAYPOINTS];				///< The array of all waypoints (max MAX_WAYPOINTS)
			waypoint_struct current_waypoint;							///< The structure of the current waypoint
			uint16_t number_of_waypoints;								///< The total number of waypoints
			int8_t current_waypoint_count;								///< The number of the current waypoint
			
			local_coordinates_t waypoint_coordinates;					///< The coordinates of the waypoint in GPS navigation mode (MAV_MODE_AUTO_ARMED)
			local_coordinates_t waypoint_hold_coordinates;				///< The coordinates of the waypoint in position hold mode (MAV_MODE_GUIDED_ARMED)
			local_coordinates_t waypoint_critical_coordinates;			///< The coordinates of the waypoint in critical state
			local_coordinates_t waypoint_following;						///< The coordinates of the waypoint to follow
			float dist2wp_sqr;											///< The square of the distance to the waypoint
			
			bool hold_waypoint_set;										///< Flag to tell if the hold position waypoint is set

			bool waypoint_sending;										///< Flag to tell whether waypoint are being sent
			bool waypoint_receiving;									///< Flag to tell whether waypoint are being received or not
			
			int32_t sending_waypoint_num;								///< The ID number of the sending waypoint
			int32_t waypoint_request_number;							///< The ID number of the requested waypoint

			uint16_t num_waypoint_onboard;								///< The number of waypoint onboard

			uint32_t start_timeout;										///< The start time for the waypoint timeout
			uint32_t timeout_max_waypoint;								///< The max waiting time for communication

			position_estimator_t* position_estimator;					///< The pointer to the position estimation structure
			const ahrs_t* ahrs;											///< The pointer to the attitude estimation structure
			state_t* state;												///< The pointer to the state structure
			mavlink_communication_t* mavlink_communication;				///< The pointer to the MAVLink communication structure
			const mavlink_stream_t* mavlink_stream;						///< Pointer to MAVLink stream

		}mavlink_waypoint_handler_t;
		
		typedef struct
		{
			uint8_t frame;												///< The reference frame of the waypoint
			uint16_t waypoint_id;										///< The MAV_CMD_NAV id of the waypoint
			uint8_t current;											///< Flag to tell whether the waypoint is the current one or not
			uint8_t autocontinue;										///< Flag to tell whether the vehicle should auto continue to the next waypoint once it reaches the current waypoint
			float param1;												///< Parameter depending on the MAV_CMD_NAV id
			float param2;												///< Parameter depending on the MAV_CMD_NAV id
			float param3;												///< Parameter depending on the MAV_CMD_NAV id
			float param4;												///< Parameter depending on the MAV_CMD_NAV id
			double x;													///< The value on the x axis (depends on the reference frame)
			double y;													///< The value on the y axis (depends on the reference frame)
			double z;													///< The value on the z axis (depends on the reference frame)
		} waypoint_struct;
	
	neighbors (See neighbor_selection.h)
		
		typedef struct
		{
			uint8_t number_of_neighbors;								///< The actual number of neighbors at a given time step
			float safe_size;											///< The safe size for collision avoidance
			track_neighbor_t neighbors_list[MAX_NUM_NEIGHBORS];			///< The list of neighbors structure
			float collision_dist_sqr;									///< The square of the collision distance
			float near_miss_dist_sqr;									///< The square of the near-miss distance
			position_estimator_t* position_estimator;					///< The pointer to the position estimator structure
			const mavlink_stream_t* mavlink_stream;						///< The pointer to the MAVLink stream
		} neighbors_t;
		
		typedef struct
		{
			uint8_t neighbor_ID;											///< The MAVLink ID of the vehicle
			float position[3];												///< The 3D position of the neighbor in m
			float velocity[3];												///< The 3D velocity of the neighbor in m/s
			uint32_t time_msg_received;										///< The time at which the message was received in ms
		} track_neighbor_t;	
			
	data_logging (See data_logging.h) // NOTE: DO NOT HAVE ACCESS TO THIS YET
	
		/**
		 * \brief	The structure to log the data
		 *
		 * \details  	data_logging_set is implemented as pointer because its memory will be
		 * 				allocated during initialisation
		 */
		typedef struct  
		{	
			bool debug;													///< Indicates if debug messages should be printed for each param change
			data_logging_set_t* data_logging_set;						///< Pointer to a set of parameters, needs memory allocation
			
			FRESULT fr;													///< The result of the fatfs functions
			FATFS fs;													///< The fatfs handler
			FIL fil;													///< The fatfs file handler

			uint32_t time_ms;											///< The microcontroller time in ms

			int buffer_name_size;										///< The buffer for the size of the file's name
			int buffer_add_size;										///< The buffer for the size of the file's extension char*

			char *file_name;											///< The file name
			char *name_n_extension;										///< Stores the name of the file

			bool file_init;												///< A flag to tell whether a file is init or not
			bool file_opened;											///< A flag to tell whether a file is opened or not
			bool file_name_init;										///< A flag to tell whether a valid name was proposed
			bool sys_mounted;											///< A flag to tell whether the file system is mounted
			
			uint32_t loop_count;										///< Counter to try to mount the SD card many times
			
			uint32_t logging_time;										///< The time that we've passed logging since the last f_close
			
			uint32_t log_data;											///< A flag to stop/start writing to file
			
			uint32_t sys_id;											///< the system ID
			
			const state_t* state;										///< The pointer to the state structure	
		}data_logging_t;
		
		/**
		 * \brief 	Configuration for the module data logging
		 */
		typedef struct
		{
			uint32_t max_data_logging_count;							///< Maximum number of parameters
			bool debug;													///< Indicates if debug messages should be printed for each param change
			uint32_t log_data;											///< The initial state of writing a file
		} data_logging_conf_t;
}

VARIABLES
{
	// Velocity
		neighbors->neighbors_list[0].velocity[X] // X Velocity (See end of neighbor_selection.c)
		neighbors->neighbors_list[0].velocity[Y] // Y Velocity
		neighbors->neighbors_list[0].velocity[Z] // Z Velocity
		// Warning: Possible to replace X,Y,Z by 0,1,2? (See neighbor_selection.h)
	
	// Time since last waypoint obtained
		// There will need to be a check for the effect caused by the communication lag
		timeWP = data_logging.time_ms - neighbors->neighbors_list[0].time_msg_received (See data_logging.h and neighbor_selection.h)
		// NOTE: NEEDS DATA_LOGGING VARIABLE !!!
	
	// Previous waypoint
		// Will have to be stored for non linear predictions
		
	
	// ATTENTION
		A possibility would be to create a new structure containing the information for waypoints:
		- Time since last waypoint message
		- Coordinates for previous waypoints
}

FUNCTIONS
{
	quick_trig_sin(float x); // Found in util\quick_trig.c
	quick_trig_cos(float x);
}

QUESTIONS
{
	In track_following.c - void track_following_get_waypoint(track_following_t* track_following)
		Why is the sqrt called each time instead of once at the end? Avoid overflow?
	
	Is there supposed to be one waypoint only?
	
	Is the waypoint (neighbor) information sent once every 4 seconds or continuously?
	
	What is the private library folder? Do we use it?
}

VARIABLES
{
	// Positions
	track_following->waypoint_handler->waypoint_following.pos[i] // Current micro-waypoint (Prediction)
	track_following->neighbors->neighbors_list[0].position[i] // Last received waypont
	
	// Speed
	track_following->neighbors->neighbors_list[0].velocity[i] // Heading values
	
	// Time
	uint32_t time_actual = time_keeper_get_millis(); // Actual time (requires #include "time_keeper.h"
	uint32_t timeWP = track_following->neighbors->neighbors_list[0].time_msg_received; // Last sent waypoint time in ms
	
	
}

CODE
{

	#include "time_keeper.h"
	
												//LINEAR//
												
	void track_following_improve_waypoint_following(track_following_t* track_following)
	{
		// Write your code here
		
		//Time since last waypoint update (+ message send duration in case of lag)
		// timeWP = data_logging.time_ms - neighbors->neighbors_list[0].time_msg_received // REQUIRES DATA_LOGGING !!!
		// data_logging.time_ms found in data_logging.c
		// neighbor_selection.c (end) neighbors->neighbors_list[actual_neighbor].time_msg_received
		
		//uint32_t timeWP = track_following->neighbors->neighbors_list[0].time_msg_received; // REMOVED since information sent in track_following
		
		track_following_linear_strategy(track_following/*, timeWP*/);
	}

	void track_following_linear_strategy(track_following_t* track_following/*, float timeWP*/)
	{
		float offset;
		
		offset = time_last_WP_ms(track_following);
		
		/*
		uint32_t timeWP = track_following->neighbors->neighbors_list[0].time_msg_received; // Last waypoint time in ms
		uint32_t time_actual = time_keeper_get_millis(); // actual time in ms
		uint32_t time_offset = time_actual - timeWP; // time since last waypoint in ms
		*/
		
		for(i=0;i<3;i++)
		{
			offset = track_following->neighbors->neighbors_list[0].velocity[i]*time_offset*1000; // velocity in m/s and time_offset in ms
			
			track_following->waypoint_handler->waypoint_following.pos[i] =
					track_following->neighbors->neighbors_list[0].position[i]
					+ offset;
		}
	}
	
	// Time since lastwaypoint was received
	float time_last_WP_ms(track_following_t* track_following)
	{
		uint32_t timeWP = track_following->neighbors->neighbors_list[0].time_msg_received; // Last waypoint time in ms
		uint32_t time_actual = time_keeper_get_millis(); // actual time in ms
		uint32_t time_offset = time_actual - timeWP; // time since last waypoint in ms
	}
	
	void track_following_non_linear_strategy(track_following_t* track_following, track_following_WP* previous_waypoints)
	{
		/*
		PSEUDOCODE
		----------
		
		v = old waypoint velocity
		u = new waypoint velocity
		P0 = new waypoint position
		w = new waypoint position - old waypoint position
		
		// Calculate when a new waypoint is issued
			
			si = (v2*w1 - v1*w2)/(v1*u2-v2*u1) // u and v need to be orthaganal to original u and v
			rotation_centre = p0+si*u  (ps is centre)
			uv_scalar_product = vectors_scalar_product(u[3], v[3])
			u_norm = vectors_norm(u[3])
			v_norm = vectors_norm(v[3])
			rotation_period_angle = quick_trig_acos(uv_scalar_product/(u_norm*v_norm));
		
		// Calculate at each waypoint update
		
			rotation_current_angle = rotation_period_angle / 4 seconds +
			(xr,yr) = P0 - rotation centre
			(xr,yr) = rotation_matrix * (xr,yr)
			(x_wp,y_wp) = (xr,yr) + rotation_centre
		*/
		
		
		// Variables
		// ---------
		
		//Position and velocities
			float WP_sent_new_pos[3]; // Waypoint last received 
			float WP_sent_new_vel[3];
			float WP_sent_old_pos[3]; // Previous waypoint before last
			float WP_sent_old_vel[3];
			float WP_pos_predict[3]; // Current waypoint the quadrostalker must follow
			
			WP_sent_new_vel[3]
		
		// track_following->neighbors->neighbors_list[0].position[i]
		
		float WP_sent_new_vel_ortho[3] = vector_orthogonal(WP_sent_new_vel);
		float WP_sent_old_vel_ortho[3] = vector_orthogonal(WP_sent_old_vel);
		
		float rotation_centre = vector_intersection(WP_sent_old_pos,
													WP_sent_old_vel_ortho,
													WP_sent_old_pos,
													WP_sent_new_vel_ortho);
													
		float rotation_angle_tot = vector_rotation_angle(WP_sent_old_vel_ortho, WP_sent_new_vel_ortho) 
		
		float t = time_last_WP_ms(track_following);
		// Angle with the last received coordinates viewed from centre :
		float rotation_angle_current = rotation_angle_tot*t/4000;

		WP_pos_predict = WP_rotation_pos(WP_sent_new_pos, rotation_centre, rotation_angle_current);
		
		write_waypoint(,yr,) // Save new and old waypoints
	}
	
	// vector_intersection: returns the coordinates of the vector intersection
	float vector_intersection(float v_pos[3], float v_dir[3], float u_pos[3], float u_dir[3])
	{
		float intersection_pos[2]; // Intersection coordinates
		float w[2];
		
		for (int i=0; i<2; i++) {
			float w[i] = u_pos[i] - v_pos[i];
		}
		
		float s = (v_dir[1]*w[0] - v_dir[0]*w[1]) / (v_dir[0]*u_dir[1] - v_dir[1]*u_dir[0]);
		
		
		intersection_pos[0] = u_pos[0] + s*w[0];
		intersection_pos[1] = u_pos[1] + s*w[1];
		intersection_pos[2] = u_pos[2];
		
		return intersection_pos;
	}
	
	// vector_rotation_angle: returns the angle between the two vectors
	float vector_rotation_angle(float v_dir[3], float u_dir[3])
	{
		float angle;
		
		float uv_scalar_product = vectors_scalar_product(v_dir[3], u_dir[3]);
		float u_norm = vectors_norm(u_dir[3]);
		float v_norm = vectors_norm(v[3]);
		float angle = quick_trig_acos(uv_scalar_product/(u_norm*v_norm));
		
		return angle;
	}
	
	float vector_orthogonal(float v_dir[3])
	{
		float v_dir_ortho();
		
		v_dir_ortho[0] = v_dir[1];
		v_dir_ortho[1] = v_dir[0];
		v_dir_ortho[2] = v_dir[2];
		
		return v_dir_ortho;
	}
	
	float WP_rotation_pos(float pos[3], float centre[3], float angle)
	{
		float WP_new[3];
		
		WP_new[0] = pos[0] - centre[0];
		WP_new[1] = pos[1] - centre[1];
		WP_new[2] = pos[2];
		
		float angle_cos = quick_trig_cos(angle);
		float angle_sin = quick_trig_sin(angle);
		
		WP_new[0] = cos_angle*pos[0] - sin_angle*pos[1];
		WP_new[1] = sin_angle*pos[0] + cos_angle*pos[1];
		
		WP_new[0] = WP_new[0] + centre[0];
		WP_new[1] = WP_new[1] + centre[1];
		
		return WP_new;
	}
	
	void write_waypoint()
	{
		// Save previous waypoints
		// Write new waypoint
	}
}